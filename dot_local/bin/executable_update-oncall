#!/usr/bin/env ruby

REPOS = %w[
  data-pipelines-alerts
]

require "date"
require "json"
require "tempfile"
require "time"
require "uri"

if ARGV.include?("--help") || ARGV.include?("-h")
  warn "update-oncall updates the data-pipelines oncall issue with the alert issues assigned to you"
  warn ""
  warn "usage: update-oncall [--dry-run|-n]"
  warn ""
  warn "  --dry-run or -n will only output the diff without updating the on-call issue and comments"
  warn ""
  exit
end

def sh(cmd, quiet: false)
  puts "$ #{cmd}" unless quiet
  out = `#{cmd}`
  return out if $? == 0

  warn out
  abort
end

class Markdown
  class MissingParent < StandardError; end

  attr_reader :lines

  def initialize(text)
    @lines = text.split("\n")
  end

  def to_s
    lines.join("\n") + "\n"
  end

  def add_heading(heading, parent: nil)
    if parent.nil?
      return if lines.include?(heading)

      lines << "" if lines.last != ""
      lines << heading
    elsif (pi = lines.index { |line| line =~ /^#{parent}/ })
      depth = parent[/^#+/].length
      if (next_heading = lines.each_index.detect { |i| i > pi && lines[i] =~ /^\#{1,#{depth}}[^#]/ })
        return if lines[pi..next_heading].include?(heading)

        lines.insert next_heading, heading, ""
      else
        # TODO: duplicate check here?
        lines << "" if lines.last != ""
        lines << heading
      end
    else
      raise MissingParent, "parent not found: #{parent.inspect}"
    end
  end

  def add_text(text, parent: nil)
    if parent.nil?
      puts "adding text: no parent: #{text.inspect}"
      lines << "" unless lines.last == "" || (text.lines.first =~ /^[-*] / && lines.last =~ /^[-*] /)
      lines << text
    elsif (pi = lines.index { |line| line =~ /^#{parent}/ })
      depth = parent[/^#+/].length
      if (next_heading = lines.each_index.detect { |i| i > pi && lines[i] =~ /^\#{1,#{depth}}[^#]/ })
        puts "adding text: parent is #{lines[pi].inspect}: #{text.inspect}"
        puts "  and next heading is #{lines[next_heading].inspect}"
        if lines.length > 2 && lines[next_heading - 1] == "" && text.lines.first =~ /^[-*] / && lines[next_heading - 2] =~ /^[-*] /
          lines.insert next_heading - 1, text
        else
          lines.insert next_heading, text, ""
        end
      else
        lines << "" unless lines.last == "" || (text.lines.first =~ /^[-*] / && lines.last =~ /^[-*] /)
        lines << text
      end
    end
  end
end

class Comment
  attr_reader :id, :path, :before
  attr_accessor :body

  def self.for_date(date)
    day = Date.parse(date)
    comment = new("id" => nil, "body" => "")
    comment.body = "## Log from #{date} (#{day.strftime('%A')})\n"
    comment
  end

  def initialize(data)
    @id = data["id"]
    @path = data["url"] && URI.parse(data["url"]).path
    @body = data["body"].gsub("\r\n", "\n")
    @before = @body.dup
  end

  def date
    body =~ /##.*(\d{4}-\d{2}-\d{2})/ && Regexp.last_match(1)
  end

  def new?
    id.nil?
  end

  def changed?
    body != before
  end

  def diff
    before_file = Tempfile.new
    File.open(before_file, "w") { |f| f.puts before }
    after_file = Tempfile.new
    File.open(after_file, "w") { |f| f.puts body }
    output = `git difftool --no-index -y -x "difft --color=always" #{before_file.path} #{after_file.path}`
    before_file.unlink
    after_file.unlink
    output
  end

  def update_alerts(alerts)
    puts "updating alerts for #{date}"
    alerts = alerts.reject { |a| body.include?(a.ref) }
    if alerts.empty?
      # all alerts included already
      puts "  no new alerts to add"
      return
    end
    puts "  #{alerts.size} new alerts to add"

    md = Markdown.new(body)
    add_alerts(md, alerts.select { |a| a.severity == "sev1" }, "SEV1")
    add_alerts(md, alerts.reject { |a| a.severity == "sev1" }, "SEV2/3")

    @body = md.to_s
  end

  # modifies lines in place
  def add_alerts(md, alerts, severity)
    return if alerts.empty?

    puts "  adding alerts for #{severity}"
    parent = "### #{severity}"
    md.add_heading(parent, parent: nil)
    alerts.group_by(&:monitor).each do |monitor, by_monitor|
      monitor_heading = "#### `#{monitor}`"
      md.add_heading(monitor_heading, parent: parent)
      by_monitor.each do |alert|
        md.add_text("* #{alert.ref}", parent: monitor_heading)
      end
    end
  end
end

class AlertIssue
  def initialize(data)
    @data = data
  end

  def title
    @data["title"]
  end

  def date
    Time.parse(@data["created_at"])
  end

  def monitor
    title.split(" - ")[1]
  end

  def ref
    repo = @data["repository_url"].split("/").last
    "github/#{repo}##{@data['number']}"
  end

  def severity
    if @data["body"] =~ /\[P(\d)\]/
      "sev" + ::Regexp.last_match(1)
    elsif @data["body"] =~ /severity:(sev\d)/
      ::Regexp.last_match(1)
    else
      raise "unknown severity for #{ref}"
    end
  end
end

class CLI
  def self.run
    dry_run = ARGV.include?("--dry-run") || ARGV.include?("-n")
    verbose = ARGV.include?("--verbose") || ARGV.include?("-v")

    puts "finding current user"
    user = JSON.parse(sh("gh api user"))["login"]

    # load issue body
    puts "finding oncall issue for @#{user}"

    issues = JSON.parse(sh("gh api -X GET repos/github/data-pipelines/issues -f labels=on-call -f state=open -f assignee=#{user} -f title=on-call"))
    issues = issues.select { |i| i["title"] =~ /On-call: \d{4}-\d{2}-\d{2}/ }

    if issues.empty?
      warn "no oncall issue found"
      abort
    end

    if issues.length != 1
      warn "got multiple oncall issues:"
      issues.each do |issue|
        puts "  ##{issue['number']}: #{issue['title']}"
      end
      abort
    end

    issue = issues.first
    puts "updating issue ##{issue['number']}: #{issue['title']}"

    # get the date range from the issue title
    dates = issue["title"].scan(/\d{4}-\d{2}-\d{2}/).map { |d| Date.parse(d) }
    if dates.length != 2
      warn "could not find date range in issue title"
      abort
    end

    comments = JSON.parse(sh("gh api -X GET repos/github/data-pipelines/issues/#{issue['number']}/comments")).map do |json|
      Comment.new(json)
    end.to_h do |c|
      [c.date, c]
    end

    since = dates.first.to_s
    puts "fetching alerts since #{since}..."

    alerts = REPOS.flat_map do |repo|
      JSON.parse(sh("gh api -X GET 'repos/github/#{repo}/issues' -f assignee=#{user} -f state=all -f per_page=100 -f direction=asc -f since=#{since} --paginate |  jq 'reduce inputs as $i (.; . += $i)'"))
    end
    total = alerts.length
    datadog = alerts.select { |a| a["labels"].map { |l| l["name"] }.include?("datadog") }
    puts "found #{total} matching issues, #{datadog.size} are datadog alerts"
    alerts_by_date = datadog.map do |data|
      AlertIssue.new(data)
    end.sort_by(&:date).group_by { |a| a.date.localtime.strftime("%F") }

    alerts_by_date.sort_by(&:first).each do |date, alerts|

      if verbose
          puts "alerts for #{date}"
          alerts.each do |alert|
          puts "  #{alert.severity} #{alert.monitor} #{alert.ref}"
        end
      end

      comment = comments[date] ||= Comment.for_date(date)
      comment.update_alerts(alerts)
    end

    # ignore comments from users
    comments.filter! { |date, comment| !date.nil? }

    comments.sort_by(&:first).each do |_date, comment|
      if dry_run
        if comment.new?
          puts "new comment for #{comment.date}"
          puts comment.diff
        elsif comment.changed?
          puts "comment for #{comment.date} changed"
          puts comment.diff
        else
          puts "comment for #{comment.date} unchanged"
        end
      elsif comment.new?
        puts "creating comment for #{comment.date}"
        puts comment.diff
        Tempfile.create("comment") do |tmpfile|
          File.open(tmpfile.path, "w") { |f| f.puts({ "body" => comment.body }.to_json) }
          sh "gh api -X POST #{issue['comments_url']} --input #{tmpfile.path}"
        end
      elsif comment.changed?
        puts "updating comment for #{comment.date}"
        puts comment.diff
        Tempfile.create("comment") do |tmpfile|
          File.open(tmpfile.path, "w") { |f| f.puts({ "body" => comment.body }.to_json) }
          sh "gh api -X PATCH #{comment.path} --input #{tmpfile.path}"
        end
      else
        puts "no changes for #{comment.date}"
      end
    end

    nil
  end
end

CLI.run if __FILE__ == $PROGRAM_NAME

