#!/usr/bin/env bash

github_projects() {
  test -d ~/github || return
  for dir in $(find ~/github -type d -maxdepth 2 -name .git); do
    remote=$(git -C "$dir" remote show)
    if [ -n "$remote" ] && (git -C "$dir" symbolic-ref -q HEAD >/dev/null || test -d "$dir/../.jj"); then
      echo $(dirname $dir)
    fi
  done
}

golang_projects() {
  test -d ~/go/src/github.com || return
  for org in $(find ~/go/src/github.com -type d -mindepth 1 -maxdepth 1); do
    org=$(basename $org)
    for dir in $(find ~/go/src/github.com/$org -type d -maxdepth 2 -name .git); do
      echo $(dirname $dir)
    done
  done
}

projects() {
  github_projects
  golang_projects
}
fetch() {
  outfile=$(mktemp)

  if [[ -d "${1}/.jj" ]]; then
    jj -R "${1}" --color always git fetch 2> >(colorize 1 >> "${outfile}") >> "${outfile}"
  else
    git -C "${1}" fetch --all --prune 2> >(grep -v autostash | colorize 1 > "${outfile}") | grep -v autostash > "${outfile}"
    current_branch=$(git -C "${1}" symbolic-ref --short HEAD)

    # if the branch has been merged, let's clean it up
    if ! git -C "${1}" show-ref --quiet --verify "refs/remotes/origin/$current_branch"; then
      echo "The current branch has been deleted on the remote repository." | colorize 3 >> "${outfile}"
      # git -C "${1}" checkout $(git -C "${1}" main-branch) 2>&1 >> "${outfile}"
    fi

    git -C "${1}" pull --quiet --stat --all --prune --autostash --show-forced-updates 2> >(grep -v autostash | colorize 1 > "${outfile}") | grep -v autostash > "${outfile}"
    git -C "${1}" clean-merged-branches 2> >(colorize 1 >> "${outfile}") >> "${outfile}"
  fi

  if [[ -s "${outfile}" ]]; then
    echo "----- ${1} -----" | colorize 4
    cat "${outfile}"
  fi
  rm "${outfile}"
}
export -f fetch

simplefetch() {
  echo "----- ${1} -----" | colorize 4
  set -x
  if [[ -d "${1}/.jj" ]]; then
    jj -R "${1}" --color always git fetch 2> >(colorize 1)
  else
    git -C "${1}" pull --all --prune --autostash 2> >(grep -v autostash | colorize 1) | grep -v autostash
    git -C "${1}" clean-merged-branches 2> >(colorize 1)
  fi
}
export -f simplefetch

if [[ "$1" == "--help" ]]; then
  echo "Usage: fetchall [--simple]"
  echo "  --simple: no parallelization"
  exit 0
fi

if [[ "$1" == "--simple" ]]; then
  for project in $(projects | sort); do
    simplefetch "$project"
  done
else
  PARALLELISM=400%
  projects | sort | parallel -j $PARALLELISM --eta --bar --timeout 1800s fetch {}
fi
