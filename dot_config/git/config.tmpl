[user]
  name = Nathan Witmer
  email = nathan@zerowidth.com
[color]
	diff = always
	status = always
	branch = always
	ui = true
[apply]
	whitespace = fix
[alias]
	ci = commit -v
	cia = commit -av
  ca = commit --amend -v
	st = status -sb -uall
	co = checkout
  cob = checkout -b
	nb = checkout -b
  ; FIXME `git-branches` doesn't like leading parens, e.g. during a rebase
  cb = !git branches | fzf --query="$1" --reverse --with-nth=2.. --nth=1 --preview 'git log --stat --color {1}...{1}~10' | awk '{print $2}' | xargs git checkout
	dh = diff -w HEAD
	ds = diff HEAD --stat
	unstage = reset HEAD --
	untrack = rm --cached
	di = diff --cached
  dis = diff --cached --stat
	du = !git show-ref -q main && git diff origin/main.. || git diff origin/master..
	p = pull --stat
	pp = !git push && git pull
	recent = for-each-ref --sort=-committerdate --format='%(refname:short) (%(committerdate:relative))' refs/heads
	cor = !git recent | fzf --reverse --nth=1 --preview 'git log --patch --color {1}...{1}~5' | awk '{print $1}' | xargs git checkout
  ; log / log with stat
	lg = log --color --graph --date=human --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%ar - %ad) %C(blue)<%an>%Creset%n'
	lgs = log --color --graph --date=human --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%ar - %ad) %C(blue)<%an>%Creset%n%+b' --stat
  ; log just the branch
  lgb = log --color --graph --date=human --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%ar - %ad) %C(blue)<%an>%Creset%n' --first-parent
	lgbs = log --color --graph --date=human --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%ar - %ad) %C(blue)<%an>%Creset%n%+b' --first-parent --stat
  ; log difference between upstream
  lgu = "!b=$(git main-branch); git log --color --graph --date=human --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%ar - %ad) %C(blue)<%an>%Creset%n' `git merge-base HEAD origin/$b`.."
	au = add -u
	f = fetch --all --prune
	amend = commit --amend -v
	recommit = commit --amend --no-edit
	rc = rebase --continue
	ri = rebase --interactive --rebase-merges
	riu = rebase --interactive --rebase-merges @{upstream}
	s = stash
	sp = stash pop
  ss = stash show -p
	ap = add -p
	an = add -N
	lp = log -p
	ls = log -p -S ; search for log changes to a given string
	sha = "!git rev-parse --short HEAD | tee /dev/tty | tr -d '\n' | pbcopy; git rev-parse HEAD"
	bn = !git rev-parse --abbrev-ref HEAD | tee /dev/tty | tr -d '\n' | pbcopy
	current-branch = rev-parse --abbrev-ref HEAD
	main-branch = "!git symbolic-ref refs/remotes/origin/HEAD 2>/dev/null | sed 's@^refs/remotes/origin/@@'"
	clean-merged-branches = "!git branch --no-color --format '%(if:equals=[gone])%(upstream:track)%(then)%(refname:short)%(end)' --merged | xargs -t -I {} git branch -d {}"
	branch-changes = !git diff --name-only $(git merge-base $(git main-branch) @)
	mc = diff --name-status --diff-filter=U
	conflicts = diff --name-only --diff-filter=U
[core]
	autocrlf = input
{{- if (or .mac .codespaces) }}
	editor = code --wait
{{- else }}
	editor = vim
{{- end }}
{{- if .mac }}
[credential "https://github.com"]
	helper = !/opt/homebrew/bin/gh auth git-credential
[credential "https://gist.github.com"]
	helper = !/opt/homebrew/bin/gh auth git-credential
{{- end }}
[branch]
	autosetupmerge = true
	autosetuprebase = remote
[diff "ruby"]
	funcname = ^ *\\(\\(class\\|module\\|def\\) .*\\)
[diff "hex"]
	textconv = hexdump -v -C
	binary = true
[diff]
	tool = opendiff
{{ if .mac }}
	external = difft
{{- end }}
	algorithm = patience
	renames = copies
	mnemonicPrefix = 1
	compactionHeuristic = true
	indentHeuristic = true
	renameLimit = 3000
  colorMoved = dimmed_zebra
[merge]
	tool = opendiff
  conflictstyle = diff3
	ff = no
[pull]
	rebase = true
[push]
	default = current
	autoSetupRemote = true
[difftool "sourcetree"]
	cmd = opendiff \"$LOCAL\" \"$REMOTE\"
[browser "gitscm"]
	cmd = /bin/sh -c 'open http://git-scm.com/docs/$(basename $1 .html)' --
[help]
	browser = gitscm
	autoCorrect = 20
[advice]
	statusHints = false
[rerere]
	enabled = true
[hub]
	protocol = https
[github]
	user = zerowidth
[filter "lfs"]
	clean = git-lfs clean %f
	smudge = git-lfs smudge %f
	required = true
[interactive]
[rebase]
	autoStash = 1
[fetch]
	prune = true
[protocol]
	version = 2
[init]
  defaultBranch = main
