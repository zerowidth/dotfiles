"$schema" = "https://jj-vcs.github.io/jj/latest/config-schema.json"

[user]
name = "Nathan Witmer"
email = "nathan@zerowidth.com"

[ui]
diff-editor = "gitpatch"
diff-formatter = "difft"
default-command = "log"
bookmark-list-sort-keys = ["committer-date-", "name"]

[git]
push-new-bookmarks = true
write-change-id-header = true

# via @dubi steinkek in the jj discord
[merge-tools.gitpatch]
program = "sh"
edit-args = ["-c", '''
  set -eu
  rm -f "$right/JJ-INSTRUCTIONS"
  git -C "$left" init -q
  git -C "$left" add -A
  git -C "$left" commit -q -m baseline --allow-empty
  mv "$left/.git" "$right"
  git -C "$right" add --intent-to-add --ignore-removal . # tell git to include new files in interactive patch mode
  git -C "$right" add -p
  git -C "$right" diff-index --quiet --cached HEAD && { echo "No changes done, aborting split."; exit 1; }
  git -C "$right" commit -q -m split
  git -C "$right" reset -q --hard # undo changes in modified files, remove added files
''',
]
merge-args = ["-c", "echo gitpatch cannot be used as a diff tool"]
diff-args = ["-c", "echo gitpatch cannot be used as a diff tool"]

[templates]
# git commit --verbose, kinda:
draft_commit_description = '''
concat(
  description,
  surround(
    "\nJJ: This commit contains the following changes:\n", "",
    indent("JJ:     ", diff.stat(72)),
  ),
  "\nJJ: ignore-rest\n",
  diff.git(),
)
'''

[template-aliases]
'format_short_change_id(id)' = 'id.shortest(3)'
'format_short_commit_id(id)' = 'id.shortest(3)'
'format_timestamp(timestamp)' = 'timestamp.ago()'

[revsets]
'log' = 'branch'

[revset-aliases]
# show everything in the current set of branches off of trunk():
branch = '(coalesce(trunk(),root())..@)- | (coalesce(trunk(),root())..@)::'
log = 'heads(coalesce(trunk(), root()))..present(@) | ancestors(recent(visible_heads()), 2) | present(trunk())'
more = 'log | ancestors(visible_heads(), 2)'

# set all remote bookmarks (and implicitly commits on branches) to be immutable
# github doesn't play nicely with rebase+force push
# 'immutable_heads()' = "builtin_immutable_heads() | remote_bookmarks()"

'closest_bookmark(to)' = 'heads(::to & bookmarks())'
'closest_pushable(to)' = 'heads(::to & mutable() & ~description(exact:"") & (~empty() | merges()))'
'unmerged()' = 'bookmarks() & ~(trunk():: | trunk())'
'recent()' = 'committer_date(after:"1 months ago")'
'recent(revset)' = 'revset & recent()'

[aliases]
bl = ["bookmark", "list"]
blr = ["bookmark", "list", "--revisions", "recent()"]
c = ["commit"]
ci = ["commit", "--interactive"] # commit interactive
dp = ["describe", "@-"] # describe previous
e = ["edit"]
pull = ["git", "fetch"]
push = ["git", "push"]
gf = ["git", "fetch"] # git fetchq
gi = ["git", "init", "--colocate"]
gp = ["git", "push"] # git push
i = ["git", "init", "--colocate"]
l = ["log", "-r", "more()"]

nb = ["bookmark", "create", "-r @-"] # new bookmark (for creating bookmark to push)
nc = ["new", "-B", "@", "--no-edit"] # new change before
r = ["rebase"]
rm = ["rebase", "-d", "main"] # "re-main"
s = ["show"]
si = ["squash", "--interactive"]
sp = ["show", "@-"]
up = ["util", "exec", "--", "sh", "-c", """
if [ "x$1" = "x" ]; then
  jj bookmark move --from "closest_bookmark(@)" --to "closest_pushable(@)"
else
  jj bookmark move --to "closest_pushable(@)" "$@"
fi
""", ""]
upp = ["util", "exec", "--", "sh", "-c", "jj up && jj git push", ""]
