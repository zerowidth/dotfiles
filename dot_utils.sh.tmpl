alias ls='ls -FG'
alias ll='ls -lah'
alias mv='mv -nv'
alias rehash='hash -r'
alias p4="ping 4.2.2.2"
which prettyping >/dev/null && alias ping="prettyping"
alias ia="open -a 'IA Writer' "
alias cz=chezmoi

alias kcatss="kcat -X security.protocol=ssl -X enable.ssl.certificate.verification=false"

which bat >/dev/null && {
  alias cat="bat"
  export BAT_THEME='base16'
}

{{ if .shared }}
# configure the shell for a kube context and namespace
kc() {
  options() {
    kubectl config get-contexts -o name | parallel -i -- \
      "kubectl --context {} get ns -o name | sed 's/namespace\///' | xargs -n 1 -I% echo % {} \({}\)"
  }
  if [ -n "$1" ]; then
    selected=$(options | fzf -q "$1" --nth=1,2 --with-nth=1,3)
  else
    selected=$(options | fzf --nth=1,2 --with-nth=1,3)
  fi
  if [ -z "$selected" ]; then
    return
  fi
  ns=$(echo "$selected" | awk '{print $1}')
  context=$(echo "$selected" | awk '{print $2}')
  kubectx $context
  kubens $ns
}

k() {
  kubectl "$@"
}

# run a watch command with kubectl
kw() {
  watch kubectl --context $(kubectx -c) --namespace $(kubens -c) "$@"
}

stern() {
  ~/.local/bin/stern/stern --context $(kubectx -c) --namespace $(kubens -c) "$@"
}

# kubectl each
ke() {
  gh-k8s-clusters --profile general --status ready | xargs -t -I % kubectl --context % --namespace $(kubens -c) "$@"
}

# kubectl proxima each
kpe() {
  stamp=$1
  shift
  gh-k8s-clusters --status ready --stamp $stamp | xargs -t -I % kubectl --context % --namespace $(kubens -c) "$@"
}

# kubectl github each
kge() {
  gh-k8s-clusters --profile dotcom --status ready | xargs -t -I % kubectl --context % --namespace $(kubens -c) "$@"
}

# vault login
vl() {
  . vault-login
  VAULT_ADDR=$(vault-addr) vault token renew -increment=3h58m >/dev/null || echo "renew failed"
  export AUTH_TOKEN=$(vault-secret -a hydro-tools -e production -k AUTH_TOKEN)
}

alias ht="hydro-tools"
alias at="aqueduct-tools"
{{ end }}

# quickly get to the real path (e.g. go project symlinks)
alias cdr='cd $(pwd -P)'

{{ if .mac }}
alias scan-ssh="dns-sd -B _ssh._tcp"
alias awake="pmset -g assertions | grep -i sleep"
{{ end }}


# update homebrew
function up() {
  brew update
  brew outdated
  brew upgrade --fetch-HEAD
  brew cu --cleanup --no-brew-update --yes
  brew cleanup
  antigen update
  gh extension upgrade --all
  chezmoi status
}

# Run a command, copying the command line first and then capturing the output.
# This is in support of the alfred github details snippet
function details() {
  if [ $# = 0 ]; then
    echo -n "details <command> captures the command and its output "
    echo "for the 'details' alfred snippet"
    return
  fi
  echo "capturing output of ${*}..."
  echo "\$ $*" | pbcopy
  sleep 1 # let alfred pick it up
  "$@" | pbcopy
  echo "done."
}

function ss() {
  local bundle="bundle"
  if [ -x bin/bundle ]; then
    bundle="bin/bundle"
  fi
  if [[ -e script/server ]]; then
    if [[ -e Gemfile ]]; then
      $bundle exec script/server "$@"
    else
      script/server "$@"
    fi
  elif [[ -e bin/rails ]]; then
    $bundle exec rails server "$@"
  else
    echo "no server here"
    return 1
  fi
}
function sc() {
  if [ -x bin/console ]; then
    bin/console
    return
  fi
  local bundle="bundle"
  if [ -x bin/bundle ]; then
    bundle="bin/bundle"
  fi
  if [[ -e script/console ]]; then
    $bundle exec script/console "$@"
  elif [[ -e bin/rails ]]; then
    $bundle exec rails console "$@"
  else
    echo "no console here"
    return 1
  fi
}
alias sb='script/bootstrap'
alias st='script/test'

alias dc="docker compose"
function docker-cleanup() {
  set -x
  docker ps -aq --no-trunc -f status=exited | xargs docker rm
  docker ps -aq --no-trunc -f status=created | xargs docker rm
  docker images -q --filter dangling=true | xargs docker rmi
  docker system prune --volumes -f
  docker volume prune -f
  set +x
}

# from https://github.com/junegunn/fzf/wiki/examples
fkill() {
  local pid
  if [ "$UID" != "0" ]; then
    pid=$(ps -f -u $UID | sed 1d | fzf -m | awk '{print $2}')
  else
    pid=$(ps -ef | sed 1d | fzf -m | awk '{print $2}')
  fi

  if [ "x$pid" != "x" ]; then
    echo $pid | xargs kill -${1:-9}
  fi
}

if [ -n "$(command -v code)" ]; then
  export EDITOR="code"
  export JJ_EDITOR="code -w"
  function e() {
    if [ -n "$1" ]; then
        $EDITOR -n $1
    else
      $EDITOR -n . "$@"
    fi
  }
elif [ -n "$(command -v vim)" ]; then
  export EDITOR="vim"
elif [ -n "$(command -v vi)" ]; then
  export EDITOR="vi"
fi

# mysql
export MYSQL_PS1="\u@\h \d> "

# format ag output for markdown
alias mdformat='ruby -lne '\''x, y = $_.split(/\s+/,2); puts "* #{x} `#{y}`"'\'''

type nodenv &> /dev/null && eval "$(nodenv init -)"
if [ -x ~/.rbenv/bin ]; then
  eval "$(~/.rbenv/bin/rbenv init - bash)"
else
  type rbenv &> /dev/null && eval "$(rbenv init -)"
fi

function bo() {
  local bundle="bundle" gems gem
  if [ -x bin/bundle ]; then
    bundle="bin/bundle"
  fi
  if ! gems=$($bundle list --paths); then
    echo "$gems"
    return 1
  fi
  if [ $# -gt 0 ]; then
    gem=$(echo "$gems" | fzf -d/ --nth=-1 --with-nth=-1 -1 -q "$@")
  else
    gem=$(echo "$gems" | fzf -d/ --nth=-1 --with-nth=-1 -1)
  fi
  if [ -n "$gem" ]; then
    e "$gem"
  else
    return 1
  fi
}

function be() {
  local bundle="bundle"
  if [ -x bin/bundle ]; then
    bundle="bin/bundle"
  fi
  $bundle exec "$@"
}

# git utils
function g() {
  if [[ $# -gt 0 ]]; then
    git "$@"
  else
    git status --short --branch -uall
  fi
}
alias gam="git amend"
alias gap="git ap"
alias gbn="git branchname"
alias gc-="git co -"
alias gnb="git co -b"
alias gci="git ci"
alias gcm="git checkout \$(git main-branch)"
alias gd="git diff"
alias gi="git di"
alias gdi="git di"

alias js="jj status"
alias ju="jjui"

function gp() {
  git pull --stat --all --prune --progress --autostash &&
    git clean-merged-branches
}

function gpp() {
  git pull --stat --all --prune --progress --autostash &&
    git push
}

function main-branch() {
  git fetch origin
  git remote set-head origin -a
  git branch -m master main
  git branch -u origin/main main
}

[[ -f ~/.claude/local/claude ]] && alias claude="~/.claude/local/claude"
